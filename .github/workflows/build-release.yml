name: Build and Release RQPlayer

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version.json
        shell: pwsh
        run: |
         if (-not (Test-Path "version.json")) {
           Write-Host "❌ version.json not found."
           exit 1
         }
         
         $version = (Get-Content version.json | ConvertFrom-Json).version
         
         if ($version -notmatch '^\d+\.\d+\.\d+$') {
           Write-Host "❌ Invalid version format: $version"
           exit 1
         }

         Write-Host "✅ version.json is valid: $version"
         "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append


      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build RQPlayer (.msix)
        run: dotnet publish RQPlayer.csproj -c Release -f net9.0-windows10.0.19041.0 --no-self-contained

      - name: Locate built .msix
        shell: pwsh
        run: |
         $msix = Get-ChildItem -Path "**/AppPackages/*_Test/*.msix" -Recurse | Select-Object -First 1
         if ($null -eq $msix) {
         Write-Host "❌ .msix file not found."
         exit 1
         }
         Write-Host "✅ Found .msix at $($msix.FullName)"
         "MSIX_PATH=$($msix.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
         # "MSIX_NAME=$($msix.Name)" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Upload .msix to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.MSIX_PATH }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Increment version in version.json
        id: increment_version
        run: |
          current=$(jq -r '.version' version.json)
          IFS='.' read -r major minor patch <<< "$current"
          patch=$((patch + 1))
          new="$major.$minor.$patch"
          echo "{\"version\": \"$new\"}" > version.json
          echo "new_version=$new" >> $GITHUB_OUTPUT

      - name: Update version in .csproj
        run: |
          csproj=$(find . -name "*.csproj")
          version="${{ steps.increment_version.outputs.new_version }}"
          major=$(echo "$version" | cut -d. -f1)

          sed -i "s|<ApplicationDisplayVersion>.*</ApplicationDisplayVersion>|<ApplicationDisplayVersion>$version</ApplicationDisplayVersion>|" "$csproj"
          sed -i "s|<ApplicationVersion>.*</ApplicationVersion>|<ApplicationVersion>$major</ApplicationVersion>|" "$csproj"

      - name: Create Pull Request with updated version
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "update-version-${{ steps.increment_version.outputs.new_version }}"
          title: "chore: bump version to ${{ steps.increment_version.outputs.new_version }}"
          body: "This PR updates the version to ${{ steps.increment_version.outputs.new_version }}"
          base: master
          labels: auto-update, versioning
          reviewers: RenatoSSouza
          assignees: RenatoSSouza
